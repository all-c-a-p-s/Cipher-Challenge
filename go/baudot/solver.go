package main

import (
	"fmt"
	"os"
)

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func format(original []byte) (result string) { // remove wack characters
	for i := 0; i < len(original); i++ {
		if original[i] >= 65 && original[i] <= 90 {
			result += string(original[i])
		}
	}
	return result
}

func codes() map[byte]string {
	codes := map[byte]string{
		'A': "00011",
		'B': "11001",
		'C': "01110",
		'D': "01001",
		'E': "00001",
		'F': "01101",
		'G': "11010",
		'H': "10100",
		'I': "00110",
		'J': "01011",
		'K': "01111",
		'L': "10010",
		'M': "11100",
		'N': "01100",
		'O': "11000",
		'P': "10110",
		'Q': "10111",
		'R': "01010",
		'S': "00101",
		'T': "10000",
		'U': "00111",
		'V': "11110",
		'W': "10011",
		'X': "11101",
		'Y': "10101",
		'Z': "10001",
	}
	return codes
}

func baudotToEng() map[string]byte {
	r := make(map[string]byte, len(codes()))
	for k, v := range codes() {
		r[v] = k
	}
	return r
}

func encode(s string) (result string) {
	for i := 0; i < len(s); i++ {
		result += codes()[s[i]]
	}
	return result
}

func invert(s string) (res string) {
	for i := 0; i < len(s); i++ {
		if s[i] == '1' {
			res += string('0')
		} else {
			res += string('1')
		}
	}
	return res
}

func isValid(s string) bool {
	for i := 0; i < len(s)-4; i += 5 {
		slice := s[i : i+5]
		if _, ok := baudotToEng()[slice]; !ok {
			return false
		}
	}
	return true
}

func tryKeyLength(ciphertext string, keyLength int) (decoded string) {
	for i := 0; i < len(ciphertext)/keyLength; i++ {
		for j := i; j < len(ciphertext); j += len(ciphertext) / keyLength {
			decoded += string(ciphertext[j])
		}
	}
	return decoded
}

func genNums(n int) (nums []int) {
	for i := 0; i < n; i++ {
		nums = append(nums, i)
	}
	return nums
}

func decodePermutation(scrambled string, permutation []int) (result string) {
	keyLength := len(permutation)
	for i := 0; i < len(scrambled); i += keyLength {
		if i+keyLength >= len(scrambled) {
			break
		}
		slice := scrambled[i : i+keyLength]
		for j := 0; j < len(permutation); j++ {
			result += string(slice[permutation[j]])
		}
	}
	return result
}

func permute(a []int, size int, s string) {
	if size == 1 {
		if isValid(decodePermutation(s, a)) {
			fmt.Println(decodePermutation(s, a))
		}
	}

	for i := 0; i < size; i++ {
		permute(a, size-1, s)

		if size%2 == 1 {
			a[0], a[size-1] = a[size-1], a[0]
		} else {
			a[i], a[size-1] = a[size-1], a[i]
		}
	}
}

func tryAll(max int, ciphertext string) {
	for i := 2; i < max; i++ {
		fmt.Println(i)
		nums := genNums(i)
		s := tryKeyLength(ciphertext, i)
		permute(nums, i, s)
	}
}

func main() {
	_, err := os.ReadFile("ciphertext.txt")
	check(err)
	fmt.Println(isValid(`110101001000101111011011000100100100010111110010010001110110010100101100001111
111001110100111010011001101111000001000110101011101111101100100100110101011111
100111110010111101111011001001011010111110111101100110010010000100110011001111
010100010000000010011000011010101100111011111000110001011000101011110100111010
010101110111011101100110110101010101111110111100001100000110110010101101001001101010110011110001100011111100110011100100110
011100101111001100010111011010101100110101000000111101010111111011000101101100101011111010100011010001111110100100110111110
1100101001010101111111001100110011000
011010011011100011001100100101110111010111101001111111001011100100100000000111
101000000111110001101101110010010111100100111110101111011101010001101001011100
010001001001100100010111010111110011111111100111110100011100001011101011001010
110111101110110010000010011100000100100100110010110110111010111110111011001010
001101101010011011010101001011011011010110110110101010110110010000000101010110111100001000100110111010011111000110101010110
100101100110101100000110100110010010001011111111110010011110100001111011001011001011100111011001001110010110110111110101100
1001011010011001101101101000001011101
100011100001100100111000011111011100111111111110001110100001101010001101111011
111111010000100000001011101011111011101001011101101110110111100011101001001111
010110001110101111101100001101110000010000011001010010011001011110111000101011
011001100011111101100111110111100101100011000010000111011010101111101111100000
100001110011001001110111101010011100011011101111111010011011110001110100100011010011101101110101001010010001111111111111001
010000001011110111010100110111000001011001010011010000110000111010000000001111001001111111010011000010000110001000110101010
0100111010100101101001101011000000100
011110111011101101011101001100111010011000000110101011010101011001101101100111
010101110101010000111110100100100011111000001010100001010100100000010111010010
110010101111100011111101101111101011000101010110010111010101001010111001000111
000110000011000111010110010110010101101001100011011001101111111101111111000101
101000111111000100000111111110011000001110000010101101010001010111010011001000101001011001111000100010010010011100110111001
101111010000100111110001010110000111010101001000101110101010100100111111101100110101110010001101001110110100000110101101001
0101110001000101101000101010010001000
010111111100111110100100111100011010000100000001111111011010000110110100110101
100100011100100111101100111100011011010100111000111101011110001110000010000100
010110010101011100010110110001001100100001000100110010100110101001011101110110
101110000111000110100011011000100111111100110011110100010101110010110110011101
001110101101100011011110010010011111000110100011100110011111100011011100001101011101000010000011000010101110100001100101011
110110101001110001000010100111110001001011101011110101110001111110110000101110101100011101100000000101110110101100100011011
1011111011100101110100011100010110100
111001101101111011001000110010010110100101111100001100110100011001101100010001
011011100101000001111111000101011111000101101101000111101110110011001111111101
011111001111110100110100011110011110110100110010111111010001101111100001010000
101101010110001110100111101110000011011111011001110111000001011101011011111110
001010001000101101000011011010010111111111000010111011000111111001110110011101110110000001001101010011111000111100100100100
101101100110111110111011100001011000110011111100001100011101001101100100001100111111001111111011001111101010101101000101000
1000100000010101010010100010010100100
111011111001000000010110010010000110011000101010001111100101101001111010000100
010101101000111100010001001010111010111101110100010001100101000001010010101010
001100000000111110100110101010000101001111101111111100111111000101111101001000
001110111101010111111010010010111111101110111010100111010100110010001110000110
011011011010111011100001100010001001000011001011010010011010111011010110011110110010100110000000100011011100110010010111011
010101011110001111100010100110001011000100011010001001111101111101011011111001010101000010011000001111110110101110110001111
1101010110110110000111010011001001111
100011100111001101011100100110000110100101111011011001111110010111111010111111
111001010100001101111110101010111100111010001011010111001110101001000100110010
001000101110101011111100110001111101111100000111100001000111110111101111001111
000100101101100111000111100001100110100010011011010111001010100101100001100101
011011000011101010011010010100001110110110011011000111111111100101000001011010010110010010111100110101001111110010000100110
001000111010010110001110001101111010011110010101100001101000001100000011000100010111101100110101100011111000011000110110011
0101110110011000010110011010111101110
111001000111110010001111010100111011100100111001101011110110011000100001110010
110100100001011101110100000100111000000111101011000111110010000111100111100011
010011001001101110110000010010010011001000000111110110100010101100110011010011
011110110000000100100110010110010000001111101101011011100110100010111111110000
111111101010001001111110000101001000100010010001110100001001000101011011111001011110110110100110101001101110011001110111101
011111111111111100000101000000101100011111001111110011011100100001000110101111110101110000001101111100011000001011111100010
1101000111101011000111101101101011111
110101011011101011011100001000110110001001111001000100110010011011110011100001
001010100101000011000011100101110101101111010011100010110011110010101110010000
111100011100101110110001011011110010011001101101010010111000101111100001101011
100110111101011110001101000110001001110011100000010100011011001001111110110001
001000010010011100110010001000111001010110111000011011110111101011010101010111101101000111000001000100101001101010101100011
101100100010110110100011010101000011101110001011010111010101100000011010000010110111000001010011010110001011110101011001000
0111101110110110101000001110011010011
100111101001001111100011001000100111110110010010000010011101111110101011101010
011100010101111011110100001011010010010010101110111111001011000000011011011111
011110101000110000101100101011101000011100001011111001011010110100010100101011
111001100100101010011100000111000110011100111111011111010001010101010001100111
000010000010011111010001101111010000010000111101100101011001111111101000000010011011011111001000110011010110111011011100111
111010110010010110111101011010001010110111100000101100000111110011001011100010011011101101010111010011010011101010000100110
0111110010010010010100111010101101010
110110111101001101100001101001110100111110111100101001111010100011100001110110
101011000011111010010011111010101011111100110011000111110010111011011100101111
011011000101100111100001101110000110110111100100011011010111110110110101110100
110101110111110010100010011011000100100100110110011111001110110001001100100011
110100110111100101110000011010001011000110101110101101001111111100110110010001110110110101100111111111100101001000101100110
101110110111001100001101010110101110001011000011011101011110110011010110000010100100001000010001010110001101000110001110100
1100110111101111111011000000111110100
010101001100011000000110010111111001001111100010100011100001011001100011001011
111001101110000111001110001110000011100111000010100100111011101111111000110011
000101011100000101110110111010100000100010011011110110111100010001011010011101
111101110010111011011001001001101001111000111101100001101000110000010000111110
010011010101111110110001010101000010001110111000111000011100111010001101010010010101011100101001100010011010110111001000100
111001111111011001101010000010100000101000011110110111000101101110100111001100101110110111001000000110001110110011101000001
1101011111101010111011101111010111100
111001110000000011111011110010010010000101110011001110111001000011111010100111
110101000010100010110011111001100110110000000100000110101010111011111000110000
101001001011000110100001101011001100011001001001011010001011111001100101010100
010101100110011111011001000101011010011011111011101001101010101011111010111010
010101001110010111000001111001110010111100111101011011000110000010111011001000011110001101101101001001010001111100111111011
010011000110100101101001011011101110110010101001001001001011000010101110010111110101011101110100010101010111001111010111100
0001010111100101101111101000011011111
111000010100011101110001011100100101111111100010001110010011111010101101101110
011010100111011001011100010110000011001101111010100110111001111100001110001001
100010110011111111100010011110100000011101011010001111000001001111110110101110
011110010011110011000101011111111011001001101010100001110101111001001000111001
101111001110011111100111000000010000010110011110101111110010001101110011100001011010011111001011001101101001100100111010010
011111010011100001010100100011011001010101010000010111110011110010110110110010100101001011001111000111100101011010101100110
1100011111000001011001011110001110000
001000100010110000010100111111111100010110111010011011101001110111000011100011
011110001111000001011100000101000101110000101111100010011100111000010000000101
110011011110101101011100001011110011001111110100000100000100001000001111011011
101001001010001110111110110010001110101111000001101101100111001001101110110011
101100101111001100111100001110111110100111001010101010101110000111110110010100010111010110100110110111001010011011101011101
000100011111000011000100001100000110001110100010010100110001110111010111010110010000011111011110101111000110001010111100000
1111110111111011101110010100111100000
011001000101111000101111111011110000101010101011011100111110100000001111100011
110101110111000001010101101010010110101111001101110000110111101011110011000001
001111001100010101011000000100101101101111011111100010001111101101010001000110
110011001011110000000011101101110000001010111110011111111011000000110001101010
011110110101101110101001010100011110001001001111101010110110111111101000010101000001011100011111101111110010001011000011100
111111111011101010000010011000101010010100001100110010001011011110000011110100000011000110000101100110010100100110111001101
0001100000100000110011100111111100000
010110000101110000110001101001111110010111100000110111010000010011010101010001
101011110011011101000100000101010110000001001111111100000111111100011111111001
111110010011000001111100111100100100111111111100111100111101101100000000110111
111100101100101101111001010000010101100001100010111101101110000011111000011001
011000111001001011010001011111101011000110110111111111000010000100110111101010011010111011001011011110110101111011001000100
100100010110011110000110101000001001110010110001110000101100011101100100000010101011111000111110001110100010110100000111110
1111111011110110100000011100111001110
001010111010010001011011100000011000110011011000010110110010100110110010011101
110110011000100010101110101100001101000111101010100011101111100111100100111010
111110110100001101000011010111011110111001101110101010110111001000001110111111
001101111000001100101100111010110100000110001000001011011000110101010100101000
110111001010101010100001111100000111010111111100010001010000001000111011111100100111001001001010001110011010011100001100110
10101010011010101001101111100111000100001111100110100010000110100111000`))
	// s := string(ciphertext)
	// fmt.Println(decodePermutation(tryKeyLength(s, 5), []int{4, 3, 2, 1, 1}))
}
